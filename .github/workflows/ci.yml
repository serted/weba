name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.1', '8.2']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: webapp_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, pdo_sqlite
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install PHP dependencies
      run: composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader

    - name: Install Node dependencies
      run: npm ci

    - name: Setup environment
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_NAME=webapp/DB_NAME=webapp_test/' .env
        sed -i 's/DB_USER=webapp/DB_USER=root/' .env
        sed -i 's/DB_PASS=secret/DB_PASS=root/' .env

    - name: Run migrations
      run: php scripts/migrate.php
      
    - name: Seed super-admin
      run: |
        echo "Super-admin should be created by migration 004_add_superadmin.sql"

    - name: PHP Syntax Check
      run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;

    - name: Run PHPUnit tests
      run: |
        if [ -f vendor/bin/phpunit ]; then
          vendor/bin/phpunit --configuration tests/phpunit.xml
        else
          echo "PHPUnit not available, skipping"
        fi

    - name: Start PHP server
      run: php -S 0.0.0.0:5000 -t public &

    - name: Wait for server
      run: sleep 5
      
    - name: Test health endpoint
      run: |
        curl -f http://localhost:5000/health
        curl -f http://localhost:5000/health.php

    - name: Run Cypress E2E tests
      run: |
        if [ -f cypress.config.js ]; then
          npx cypress run --headless
        else
          echo "Cypress not configured, skipping"
        fi

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-php-${{ matrix.php-version }}
        path: |
          cypress/screenshots
          cypress/videos
          reports/

  # New visual regression testing job
  visual-regress:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: webapp_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, pdo_sqlite

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader
        npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Setup environment
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_NAME=webapp/DB_NAME=webapp_test/' .env
        sed -i 's/DB_USER=webapp/DB_USER=root/' .env
        sed -i 's/DB_PASS=secret/DB_PASS=root/' .env

    - name: Run migrations
      run: php scripts/migrate.php

    - name: Start local server
      run: php -S 0.0.0.0:5000 -t public &

    - name: Wait for server
      run: sleep 10

    - name: Collect baseline from original site
      run: |
        timeout 300 node scripts/collect-baseline.js || echo "Baseline collection completed or timed out"
      continue-on-error: true

    - name: Run visual regression tests
      run: node scripts/visual-regression.js
      continue-on-error: true

    - name: Upload visual regression results
      uses: actions/upload-artifact@v4
      with:
        name: visual-regression-results
        path: |
          baseline/
          screenshots/
          reports/visual-regression-report.*

  # New HTML & CSS diff testing job  
  html-diff:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: webapp_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, pdo_sqlite

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader
        npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Setup environment
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_NAME=webapp/DB_NAME=webapp_test/' .env
        sed -i 's/DB_USER=webapp/DB_USER=root/' .env
        sed -i 's/DB_PASS=secret/DB_PASS=root/' .env

    - name: Run migrations
      run: php scripts/migrate.php

    - name: Start local server
      run: php -S 0.0.0.0:5000 -t public &

    - name: Wait for server
      run: sleep 10

    - name: Run HTML & CSS diff analysis
      run: node scripts/html-diff.js
      continue-on-error: true

    - name: Upload HTML diff results
      uses: actions/upload-artifact@v4
      with:
        name: html-diff-results
        path: reports/html-diff-report.*

  # New network HAR diff testing job
  har-diff:
    runs-on: ubuntu-latest  
    needs: test
    if: github.event_name == 'pull_request'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: webapp_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, pdo_sqlite

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader
        npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Setup environment
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_NAME=webapp/DB_NAME=webapp_test/' .env
        sed -i 's/DB_USER=webapp/DB_USER=root/' .env
        sed -i 's/DB_PASS=secret/DB_PASS=root/' .env

    - name: Run migrations
      run: php scripts/migrate.php

    - name: Start local server
      run: php -S 0.0.0.0:5000 -t public &

    - name: Wait for server
      run: sleep 10

    - name: Run network HAR diff analysis
      run: node scripts/har-diff.js
      continue-on-error: true

    - name: Upload HAR diff results
      uses: actions/upload-artifact@v4
      with:
        name: har-diff-results
        path: |
          har/
          reports/har-diff-report.*

  # Enhanced modal and auth UI testing
  modal-auth-tests:
    runs-on: ubuntu-latest
    needs: test
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: webapp_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, pdo_sqlite

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --no-progress --no-interaction --prefer-dist --optimize-autoloader
        npm ci

    - name: Setup environment
      run: |
        cp .env.example .env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
        sed -i 's/DB_NAME=webapp/DB_NAME=webapp_test/' .env
        sed -i 's/DB_USER=webapp/DB_USER=root/' .env
        sed -i 's/DB_PASS=secret/DB_PASS=root/' .env

    - name: Run migrations
      run: php scripts/migrate.php

    - name: Start PHP server
      run: php -S 0.0.0.0:5000 -t public &

    - name: Wait for server
      run: sleep 5

    - name: Run modal interaction tests
      run: npx cypress run --spec "cypress/e2e/modal.cy.js"

    - name: Run authentication UI tests
      run: npx cypress run --spec "cypress/e2e/auth-ui.cy.js"

    - name: Upload modal and auth test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: modal-auth-test-results
        path: |
          cypress/screenshots
          cypress/videos

  # Packaging job
  package:
    runs-on: ubuntu-latest
    needs: [test, visual-regress, html-diff, har-diff, modal-auth-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, pdo_sqlite

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 'lts/*'
        cache: 'npm'

    - name: Install Node dependencies for building
      run: npm ci

    - name: Create deployment package
      run: bash scripts/pack.sh

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: |
          deploy_package.zip
          deploy_package_report.txt

    - name: Upload package contents for inspection
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package-contents
        path: deploy_package/

  deploy:
    needs: [test, package]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.2
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package

    - name: Deploy via SFTP
      env:
        SFTP_HOST: ${{ secrets.SFTP_HOST }}
        SFTP_USER: ${{ secrets.SFTP_USER }}
        SFTP_PASS: ${{ secrets.SFTP_PASS }}
        SFTP_PATH: ${{ secrets.SFTP_PATH }}
      run: |
        if [ -f deploy_package.zip ] && [ -n "$SFTP_HOST" ]; then
          echo "🚀 Deploying package to production..."
          # Install lftp for secure file transfer
          sudo apt-get update && sudo apt-get install -y lftp
          
          # Extract and deploy
          unzip -q deploy_package.zip
          cd deploy_package
          
          # Upload via SFTP
          lftp -c "
            set sftp:auto-confirm yes;
            open sftp://$SFTP_USER:$SFTP_PASS@$SFTP_HOST;
            mirror -R . $SFTP_PATH --delete --verbose --exclude-glob .git*
          "
          
          echo "✅ Deployment completed"
        else
          echo "🚀 Deployment skipped - no SFTP configuration or package not found"
        fi
