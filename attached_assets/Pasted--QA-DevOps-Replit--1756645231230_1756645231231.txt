Представь, что ты эксперт по QA и DevOps в Replit, специализируешься на развёртывании и всестороннем тестировании PHP/JS-проектов на shared-хостингах без Docker.

Контекст:
  - У тебя есть ZIP WebApp_complete_pro.zip с финальным состоянием проекта:  
    • public/ (статические HTML/CSS/JS + fetch-proxy.js + .htaccess)  
    • src/ (Slim-скелет, middleware, helpers)  
    • admin/ (PHP-страницы админки)  
    • migrations/ (001–004 SQL-скрипты)  
    • tests/ (PHPUnit)  
    • cypress/ (E2E и визуальные тесты)  
    • scripts/ (deploy.sh, визуальный скрипт)  
    • .github/workflows/ci.yml, README.md  

Финальный чеклист (см. план выше) включает:
  1. Съёмка фронтенда (Playwright) + визуальные регрессионные тесты  
  2. Генерация routes/manifest.json  
  3. Фронтенд без Vite (SPA-fallback, fetch-proxy.js)  
  4. Полный PHP API с регистрацией, логином, профилем и CSRF/rate-limit  
  5. Админка CRUD, CSRF-формы, роли, логирование  
  6. Автоматизация тестов (PHPUnit, Cypress) + pixelmatch (порог 2%)  
  7. CI/CD на GitHub Actions + SFTP-deploy + rollback  
  8. Health-endpoint, .env через phpdotenv

Задача:
  1. Развернуть проект в Replit-окружении:
     - Настроить `.replit` для запуска `php -S` и миграций MySQL внутри Replit  
     - Подключить переменные окружения из Secrets  
  2. Запустить все миграции и seed super-admin  
  3. Прогнать PHPUnit и обеспечить 100% зелёных тестов  
  4. Прогнать Cypress E2E и визуальные тесты, собрать baseline и сравнить с pixelmatch  
  5. Проверить на 14 маршрутах точное совпадение UI/UX с оригиналом (pixel-perf ≤2%)  
  6. Проверить SPA-fallback через `.htaccess` во всех несущностных URL  
  7. Проверить работу fetch-proxy.js (все `/api/*` запросы идут на локальный PHP API)  
  8. Провести нагрузочное тестирование API (с JMeter или k6) для 100 одновременных запросов  
  9. Собрать полный отчёт по найденным несовпадениям (UI, тесты, безопасность), и предложить конкретные патчи

Формат результата:
  1. Пошаговый отчёт по развёртыванию и запуску в Replit  
  2. Таблица найденных проблем и статусов (UI diff, тесты, CSRF/rate-limit, производительность)  
  3. Для каждой проблемы — код-патч (diff) или настройка, чтобы её исправить  
  4. Подтверждение окончательного процента визуального совпадения и покрытия тестами

Ограничения:
  - Не использовать Docker/Nginx, только встроенный PHP-сервер Replit  
  - Всю логику фронтенда сохранять 1:1 без изменений HTML/CSS/JS  
  - Любые фиксы визуальных расхождений решать через CSS-правки или .htaccess  
  - Автоматически фиксить только те проблемы, где нет серьёзного отклонения от оригинала  

Начни с развёртывания, затем спринт по каждому подпункту чеклиста, документируя шаги и патчи.