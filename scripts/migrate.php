
<?php
require_once __DIR__ . '/../vendor/autoload.php';

use Dotenv\Dotenv;

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
$dotenv = Dotenv::createImmutable(__DIR__ . '/..');
$dotenv->safeLoad();

echo "üóÑÔ∏è –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n";

try {
    $pdo = require __DIR__ . '/../config/db.php';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    $driver = $pdo->getAttribute(PDO::ATTR_DRIVER_NAME);
    echo "üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $driver\n";
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
    if ($driver === 'sqlite') {
        $pdo->exec("CREATE TABLE IF NOT EXISTS migrations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            migration VARCHAR(255) NOT NULL UNIQUE,
            executed_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )");
    } else {
        $pdo->exec("CREATE TABLE IF NOT EXISTS migrations (
            id INT AUTO_INCREMENT PRIMARY KEY,
            migration VARCHAR(255) NOT NULL UNIQUE,
            executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB");
    }
    
    $migrationsDir = __DIR__ . '/../migrations';
    $files = glob($migrationsDir . '/*.sql');
    sort($files);
    
    foreach ($files as $file) {
        $migrationName = basename($file, '.sql');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM migrations WHERE migration = ?");
        $stmt->execute([$migrationName]);
        
        if ($stmt->fetchColumn() > 0) {
            echo "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ $migrationName (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)\n";
            continue;
        }
        
        echo "‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: $migrationName\n";
        
        $sql = file_get_contents($file);
        
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º SQL –¥–ª—è SQLite
        if ($driver === 'sqlite') {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            $sql = str_replace('ENGINE=InnoDB', '', $sql);
            $sql = str_replace('DEFAULT CHARSET=utf8mb4', '', $sql);
            $sql = str_replace('COLLATE=utf8mb4_unicode_ci', '', $sql);
            $sql = str_replace('CHARSET=utf8mb4', '', $sql);
            
            // –ó–∞–º–µ–Ω—ã –¥–ª—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            $sql = str_replace('INT AUTO_INCREMENT PRIMARY KEY', 'INTEGER PRIMARY KEY AUTOINCREMENT', $sql);
            $sql = str_replace('TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP', 'DATETIME DEFAULT CURRENT_TIMESTAMP', $sql);
            $sql = str_replace('TIMESTAMP DEFAULT CURRENT_TIMESTAMP', 'DATETIME DEFAULT CURRENT_TIMESTAMP', $sql);
            $sql = str_replace('TIMESTAMP NOT NULL', 'DATETIME NOT NULL', $sql);
            $sql = str_replace('BOOLEAN DEFAULT FALSE', 'INTEGER DEFAULT 0', $sql);
            $sql = str_replace('BOOLEAN DEFAULT TRUE', 'INTEGER DEFAULT 1', $sql);
            
            // –ó–∞–º–µ–Ω—ã –¥–ª—è INSERT
            $sql = str_replace('INSERT IGNORE INTO', 'INSERT OR IGNORE INTO', $sql);
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏–∑ CREATE TABLE –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
            $statements = [];
            $indexes = [];
            $lines = explode("\n", $sql);
            $currentStatement = '';
            $inCreateTable = false;
            $tableName = '';
            
            foreach ($lines as $line) {
                $trimmedLine = trim($line);
                
                // –ù–∞—á–∞–ª–æ CREATE TABLE
                if (preg_match('/CREATE TABLE IF NOT EXISTS (\w+)/i', $trimmedLine, $matches)) {
                    if ($currentStatement) {
                        $statements[] = trim($currentStatement);
                    }
                    $currentStatement = $line . "\n";
                    $inCreateTable = true;
                    $tableName = $matches[1];
                    continue;
                }
                
                // –í–Ω—É—Ç—Ä–∏ CREATE TABLE - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                if ($inCreateTable) {
                    if (preg_match('/INDEX\s+(\w+)\s*\(([^)]+)\)/', $trimmedLine, $matches)) {
                        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ü–û–°–õ–ï CREATE TABLE
                        $indexName = $matches[1];
                        $columns = $matches[2];
                        $indexes[] = "CREATE INDEX IF NOT EXISTS $indexName ON $tableName($columns);";
                        continue;
                    } elseif (strpos($trimmedLine, ') ENGINE=') !== false) {
                        // –ö–æ–Ω–µ—Ü CREATE TABLE —Å ENGINE (MySQL)
                        $currentStatement .= ");\n";
                        $statements[] = trim($currentStatement);
                        $currentStatement = '';
                        $inCreateTable = false;
                        continue;
                    } elseif ($trimmedLine === ');') {
                        // –ö–æ–Ω–µ—Ü CREATE TABLE –±–µ–∑ ENGINE
                        $currentStatement .= $line . "\n";
                        $statements[] = trim($currentStatement);
                        $currentStatement = '';
                        $inCreateTable = false;
                        continue;
                    }
                }
                
                $currentStatement .= $line . "\n";
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π statement –µ—Å–ª–∏ –µ—Å—Ç—å
            if ($currentStatement) {
                $statements[] = trim($currentStatement);
            }
            
            // –ß–∏—Å—Ç–∏–º SQL –æ—Ç –ª–∏—à–Ω–∏—Ö –∑–∞–ø—è—Ç—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
            for ($i = 0; $i < count($statements); $i++) {
                $statements[$i] = preg_replace('/,\s*\n\s*\)/', "\n)", $statements[$i]);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ –∫–æ–Ω–µ—Ü
            $statements = array_merge($statements, $indexes);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—ã–π statement –æ—Ç–¥–µ–ª—å–Ω–æ
            foreach ($statements as $statement) {
                $statement = trim($statement);
                if (!empty($statement) && !preg_match('/^\s*--/', $statement)) {
                    try {
                        $pdo->exec($statement);
                        echo "  ‚úì –í—ã–ø–æ–ª–Ω–µ–Ω: " . substr($statement, 0, 50) . "...\n";
                    } catch (\PDOException $e) {
                        echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è statement: " . $e->getMessage() . "\n";
                        echo "Statement: $statement\n";
                        throw $e;
                    }
                }
            }
        } else {
            // –î–ª—è MySQL –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            $pdo->exec($sql);
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        $stmt = $pdo->prepare("INSERT INTO migrations (migration) VALUES (?)");
        $stmt->execute([$migrationName]);
        
        echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è $migrationName –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n";
    }
    
    echo "üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n";
    
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: " . $e->getMessage() . "\n";
    echo "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n";
    echo $e->getTraceAsString() . "\n";
    exit(1);
}
